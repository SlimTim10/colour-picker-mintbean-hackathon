{"version":3,"sources":["Colors.jsx","Palette.jsx","Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Colors","hex","style","backgroundColor","className","tinycolor","require","Palette","colors","variation","setting","settingValue","tetrad","analogous","monochromatic","splitcomplement","triad","complement","toHexString","colorPalette","Array","isArray","map","t","color","hexColor","lighten","toString","brighten","darken","desaturate","saturate","greyscale","undefined","id","Settings","changeHex","changeVariation","changeSetting","changeSettingValue","changeSettings","e","target","getAttribute","Navbar","expand","bg","variant","Nav","Toggle","aria-controls","Collapse","Brand","NavDropdown","onSelect","title","Item","eventKey","Divider","Link","value","onClick","handleSettingValueChange","randomColor","random","setRandom","Form","onChange","preventDefault","handleHexChange","inline","FormControl","type","placeholder","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.49b1579f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Colors({ hex }) {\r\n  return (\r\n    <div style={{ backgroundColor: hex }} className=\"color\">\r\n      <div className=\"hex-value\">{hex}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Colors from \"./Colors\";\r\nimport \"./Palette.css\";\r\n\r\nconst tinycolor = require(\"tinycolor2\");\r\n\r\nexport default function Palette({ hex, variation, setting, settingValue }) {\r\n  let colors;\r\n  // Using a switch to set variation type set\r\n  switch (variation) {\r\n    case \"tetrad\":\r\n      colors = tinycolor(hex).tetrad();\r\n      break;\r\n    case \"analogous\":\r\n      colors = tinycolor(hex).analogous();\r\n      break;\r\n    case \"monochromatic\":\r\n      colors = tinycolor(hex).monochromatic();\r\n      break;\r\n    case \"splitcomplement\":\r\n      colors = tinycolor(hex).splitcomplement();\r\n      break;\r\n    case \"triad\":\r\n      colors = tinycolor(hex).triad();\r\n      break;\r\n    case \"tetrad\":\r\n      colors = tinycolor(hex).tetrad();\r\n      break;\r\n    case \"complement\":\r\n      colors = tinycolor(hex).complement().toHexString();\r\n      break;\r\n  }\r\n\r\n  // Using a dictionary object to set setting\r\n  const settings = color => {\r\n    const converter = {\r\n      lighten: tinycolor(color).lighten(settingValue).toString(),\r\n      brighten: tinycolor(color).brighten(settingValue).toString(),\r\n      darken: tinycolor(color).darken(settingValue).toString(),\r\n      desaturate: tinycolor(color).desaturate(settingValue).toString(),\r\n      saturate: tinycolor(color).saturate(settingValue).toString(),\r\n      greyscale: tinycolor(color).greyscale(settingValue).toString(),\r\n      undefined: color,\r\n    };\r\n\r\n    return converter[setting];\r\n  };\r\n\r\n  let colorPalette;\r\n  if (!Array.isArray(colors)) {\r\n    return <Colors hex={colors} />;\r\n  } else {\r\n    colorPalette = colors.map(t => {\r\n      let hexColor = t.toHexString();\r\n\r\n      hexColor = settings(hexColor);\r\n\r\n      return <Colors hex={hexColor} />;\r\n    });\r\n  }\r\n\r\n  return <div id=\"container\">{colorPalette}</div>;\r\n}\r\n","import React from \"react\";\r\nimport { Navbar, Form, Nav, FormControl, NavDropdown } from \"react-bootstrap\";\r\n\r\nconst tinycolor = require(\"tinycolor2\");\r\n\r\nexport default function Settings({\r\n  changeHex,\r\n  changeVariation,\r\n  changeSetting,\r\n  changeSettingValue,\r\n}) {\r\n  const handleHexChange = e => {\r\n    e.preventDefault();\r\n    changeHex(e.target.value);\r\n  };\r\n\r\n  const handleVariationChange = variation => {\r\n    changeVariation(variation);\r\n  };\r\n\r\n  const changeSettings = e => {\r\n    const setting = e.target.getAttribute(\"value\");\r\n    changeSetting(setting);\r\n  };\r\n\r\n  const setRandom = () => {\r\n    const randomColor = tinycolor.random().toHexString();\r\n    changeHex(randomColor);\r\n  };\r\n\r\n  const handleSettingValueChange = e => {\r\n    changeSettingValue(e);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navbar expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n        <Nav className=\"mr-auto\">\r\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n\r\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <Navbar.Brand>Color Palette Generator</Navbar.Brand>\r\n            <NavDropdown\r\n              onSelect={e => handleVariationChange(e)}\r\n              title=\"Variation\"\r\n              id=\"variation\"\r\n            >\r\n              <NavDropdown.Item eventKey=\"analogous\">\r\n                Analogous\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Divider />\r\n\r\n              <NavDropdown.Item eventKey=\"monochromatic\">\r\n                Monochromatic\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Divider />\r\n\r\n              <NavDropdown.Item eventKey=\"complement\">\r\n                Complement\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item eventKey=\"splitcomplement\">\r\n                Split Complement\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Divider />\r\n              <NavDropdown.Item eventKey=\"triad\">Triad</NavDropdown.Item>\r\n              <NavDropdown.Item eventKey=\"tetrad\">Tetrad</NavDropdown.Item>\r\n            </NavDropdown>\r\n            <NavDropdown.Divider />\r\n\r\n            <Nav.Link\r\n              value={\"lighten\"}\r\n              eventKey={\"lighten\"}\r\n              onClick={e => changeSettings(e)}\r\n            >\r\n              Lighten\r\n            </Nav.Link>\r\n            <Nav.Link value={\"brighten\"} onClick={e => changeSettings(e)}>\r\n              Brighten\r\n            </Nav.Link>\r\n            <Nav.Link value={\"darken\"} onClick={e => changeSettings(e)}>\r\n              Darken\r\n            </Nav.Link>\r\n            <Nav.Link value={\"desaturate\"} onClick={e => changeSettings(e)}>\r\n              Desaturate\r\n            </Nav.Link>\r\n            <Nav.Link value={\"saturate\"} onClick={e => changeSettings(e)}>\r\n              Saturate\r\n            </Nav.Link>\r\n            <Nav.Link value={\"greyscale\"} onClick={e => changeSettings(e)}>\r\n              Greyscale\r\n            </Nav.Link>\r\n            <NavDropdown\r\n              onSelect={e => handleSettingValueChange(e)}\r\n              title=\"Change Value (%)\"\r\n            >\r\n              <NavDropdown.Item eventKey=\"2\">10</NavDropdown.Item>\r\n              <NavDropdown.Item eventKey=\"4\">20</NavDropdown.Item>\r\n              <NavDropdown.Item eventKey=\"6\">30</NavDropdown.Item>\r\n              <NavDropdown.Item eventKey=\"8\">40</NavDropdown.Item>\r\n              <NavDropdown.Item eventKey=\"12\">50</NavDropdown.Item>\r\n              <NavDropdown.Item eventKey=\"16\">60</NavDropdown.Item>\r\n              <NavDropdown.Item eventKey=\"20\">70</NavDropdown.Item>\r\n              <NavDropdown.Item eventKey=\"30\">80</NavDropdown.Item>\r\n              <NavDropdown.Item eventKey=\"40\">90</NavDropdown.Item>\r\n              <NavDropdown.Item eventKey=\"50\">100</NavDropdown.Item>\r\n            </NavDropdown>\r\n          </Navbar.Collapse>\r\n        </Nav>\r\n        <Nav.Link id=\"random\" onClick={() => setRandom()}>\r\n          Random\r\n        </Nav.Link>\r\n        <Form onChange={e => handleHexChange(e)} inline>\r\n          <FormControl type=\"text\" placeholder=\"#77d36a\" className=\"mr-sm-2\" />\r\n        </Form>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Palette from \"./Palette\";\r\nimport Settings from \"./Navbar\";\r\n\r\nfunction App() {\r\n  const [hex, changeHex] = useState(\"#5f42ad\");\r\n  const [variation, changeVariation] = useState(\"analogous\");\r\n  const [setting, changeSetting] = useState();\r\n  const [settingValue, changeSettingValue] = useState(20);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Settings\r\n        changeSetting={changeSetting}\r\n        changeVariation={changeVariation}\r\n        changeHex={changeHex}\r\n        changeSettingValue={changeSettingValue}\r\n      />\r\n      <Palette\r\n        settingValue={settingValue}\r\n        setting={setting}\r\n        variation={variation}\r\n        hex={hex}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}