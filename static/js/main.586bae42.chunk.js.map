{"version":3,"sources":["TopNav.jsx","types.js","Settings.jsx","Color.jsx","Palette.jsx","App.js","serviceWorker.js","index.js"],"names":["tinycolor","require","TopNav","changeHex","changeVariation","Navbar","expand","bg","variant","Nav","className","Toggle","aria-controls","Collapse","id","Brand","NavDropdown","onSelect","e","title","Item","eventKey","Divider","Link","onClick","randomColor","random","toHexString","setRandom","Form","onChange","preventDefault","target","value","handleHexChange","inline","FormControl","type","placeholder","Settings","settings","setSettings","defaultSettings","changeSetting","name","setting","resetSetting","simpleSliderProps","min","max","step","startPoint","complexSliderProps","isChanged","settingName","defaultValue","settingItems","Object","keys","map","types","ListGroup","active","capitalize","Button","complexSettingItem","Color","hex","style","backgroundColor","String","prototype","this","charAt","toUpperCase","slice","Palette","colors","variation","useEffect","applySettings","tetrad","analogous","monochromatic","splitcomplement","triad","complement","Array","isArray","applySetting","color","lighten","brighten","darken","saturate","desaturate","entries","reduce","colorPalette","App","useState","brightness","saturation","Container","fluid","Row","Col","xs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iYAGMA,EAAYC,EAAQ,IAEX,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,UACAC,EACC,EADDA,gBAgBA,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACpC,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,0BAE7B,kBAACP,EAAA,EAAOQ,SAAR,CAAiBC,GAAG,yBAClB,kBAACT,EAAA,EAAOU,MAAR,gCACA,kBAACC,EAAA,EAAD,CACEC,SAAU,SAAAC,GAjBpBd,EAiB+Cc,IACrCC,MAAM,YACNL,GAAG,aAEH,kBAACE,EAAA,EAAYI,KAAb,CAAkBC,SAAS,aAA3B,aAIA,kBAACL,EAAA,EAAYM,QAAb,MAEA,kBAACN,EAAA,EAAYI,KAAb,CAAkBC,SAAS,iBAA3B,iBAIA,kBAACL,EAAA,EAAYM,QAAb,MAEA,kBAACN,EAAA,EAAYI,KAAb,CAAkBC,SAAS,cAA3B,cAGA,kBAACL,EAAA,EAAYI,KAAb,CAAkBC,SAAS,mBAA3B,oBAGA,kBAACL,EAAA,EAAYM,QAAb,MACA,kBAACN,EAAA,EAAYI,KAAb,CAAkBC,SAAS,SAA3B,SACA,kBAACL,EAAA,EAAYI,KAAb,CAAkBC,SAAS,UAA3B,WAGF,kBAACL,EAAA,EAAYM,QAAb,QAIJ,kBAACb,EAAA,EAAIc,KAAL,CAAUT,GAAG,SAASU,QAAS,kBA7CnB,WAChB,IAAMC,EAAczB,EAAU0B,SAASC,cACvCxB,EAAUsB,GA2C+BG,KAArC,UAGA,kBAACC,EAAA,EAAD,CAAMC,SAAU,SAAAZ,GAAC,OAzDC,SAAAA,GACtBA,EAAEa,iBACF5B,EAAUe,EAAEc,OAAOC,OAuDMC,CAAgBhB,IAAIiB,QAAM,GAC7C,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,UAAU5B,UAAU,e,4CChEpD,G,MAHO,UAGP,EAFQ,UCaLT,EAAQ,IAMX,SAASsC,EAAT,GAIX,IAHFC,EAGC,EAHDA,SACAC,EAEC,EAFDA,YACAC,EACC,EADDA,gBAEMC,EAAgB,SAAAC,GAAI,OAAI,SAAAX,GAC5BQ,GAAY,SAAAI,GAAO,kCACdA,GADc,kBAEhBD,EAFgB,2BAGZC,EAAQD,IAHI,IAIfX,iBAKAa,EAAe,SAAAF,GAAI,OAAI,SAAA1B,GAC3BuB,GAAY,SAAAI,GAAO,kCACdA,GADc,kBAEhBD,EAFgB,2BAGZC,EAAQD,IAHI,IAIfX,MAAOS,EAAgBE,GAAMX,eAK7Bc,EAAoB,CAACC,IAAK,EAAGC,IAAK,IAAKC,KAAM,EAAGC,WAAY,GAC5DC,EAAqB,CAACJ,IAAK,EAAGC,IAAK,IAAKC,KAAM,EAAGC,WAAY,KAE7DE,EAAY,SAACC,EAAaC,GAAd,OAA+Bf,EAASc,GAAarB,QAAUsB,GAoD3EC,EAAeC,OAAOC,KAAKlB,GAAUmB,KANvB,SAAAd,GAAO,OACzBL,EAASK,GAASR,OAASuB,GA7CHN,EA6C2CT,EA5CnE,kBAACgB,EAAA,EAAUzC,KAAX,CAAgB0C,OAAQT,EAAUC,EAAa,IACzC,yBACE5C,UAAU,gBAET4C,EAAYS,cAEf,yBAAKrD,UAAU,kBACb,kBAAC,IAAD,eACEuB,MAAOO,EAASc,GAAarB,MAC7BH,SAAUa,EAAcW,IACpBP,KAGR,kBAACiB,EAAA,EAAD,CACExD,QAAQ,YACRgB,QAASsB,EAAaQ,IAFxB,WAgCFd,EAASK,GAASR,OAASuB,EAxBN,SAAAN,GAAW,OACpC,kBAACO,EAAA,EAAUzC,KAAX,CAAgB0C,OAAQT,EAAUC,EAAa,MACzC,yBACE5C,UAAU,gBAET4C,EAAYS,cAEf,yBAAKrD,UAAU,kBACb,kBAAC,IAAD,eACEuB,MAAOO,EAASc,GAAarB,MAC7BH,SAAUa,EAAcW,IACpBF,KAGR,kBAACY,EAAA,EAAD,CACExD,QAAQ,YACRgB,QAASsB,EAAaQ,IAFxB,UAUgDW,CAAmBpB,GACrE,KA/CoB,IAAAS,KAoD1B,OACE,6BACE,kBAACO,EAAA,EAAD,KACGL,ICvGM,SAASU,EAAT,GAAyB,IAARC,EAAO,EAAPA,IAC9B,OACE,yBAAKC,MAAO,CAAEC,gBAAiBF,GAAOzD,UAAU,SAC9C,yBAAKA,UAAU,aAAayD,IDWlCG,OAAOC,UAAUR,WAAa,WAC5B,OAAOS,KAAKC,OAAO,GAAGC,cAAgBF,KAAKG,MAAM,I,UEb7C3E,EAAYC,EAAQ,IAEX,SAAS2E,EAAT,GAAgD,IAKzDC,EAL4BrC,EAA4B,EAA5BA,SAAU2B,EAAkB,EAAlBA,IAAKW,EAAa,EAAbA,UAO/C,OANAC,qBAAU,WACRC,EAAchF,EAAUmE,MACvB,CAAC3B,IAIIsC,GACN,IAAK,SACHD,EAAS7E,EAAUmE,GAAKc,SACxB,MACF,IAAK,YACHJ,EAAS7E,EAAUmE,GAAKe,YACxB,MACF,IAAK,gBACHL,EAAS7E,EAAUmE,GAAKgB,gBACxB,MACF,IAAK,kBACHN,EAAS7E,EAAUmE,GAAKiB,kBACxB,MACF,IAAK,QACHP,EAAS7E,EAAUmE,GAAKkB,QACxB,MACF,IAAK,SACHR,EAAS7E,EAAUmE,GAAKc,SACxB,MACF,IAAK,aACHJ,EAAS7E,EAAUmE,GAAKmB,aAAa3D,cAIzC,IAAK4D,MAAMC,QAAQX,GACjB,OAAO,kBAACX,EAAD,CAAOC,IAAKU,IAGrB,IAAMY,EAAe,SAACC,EAAD,0BAAS9C,EAAT,YAAsBX,GAAtB,EAAgBI,KAAhB,EAAsBJ,OAAtB,MACV,YAATW,EAAqB8C,EAAMC,QAAQ1D,GACtB,eAATW,EACAX,GAAS,IAAMyD,EAAME,SAAS3D,EAAQ,KAAOyD,EAAMG,OAAO,IAAM5D,GAEvD,eAATW,EACAX,GAAS,IAAMyD,EAAMI,SAAS7D,EAAQ,KAAOyD,EAAMK,WAAW,IAAM9D,GAEpEyD,GAGAV,EAAgB,SAAAU,GAAK,OACzBjC,OAAOuC,QAAQxD,GACZyD,OAAOR,EAAcC,GACrB/D,eAGCuE,EAAerB,EAAOlB,KAAI,SAAA+B,GAC9B,IAAMvB,EAAMa,EAAcU,GAC1B,OAAO,kBAACxB,EAAD,CAAOC,IAAKA,OAGrB,OAAO,yBAAKrD,GAAG,aAAaoF,GC3BfC,MA5Bf,WAAgB,IAAD,EACYC,mBAAS,WADrB,mBACNjC,EADM,KACDhE,EADC,OAEwBiG,mBAAS,aAFjC,mBAENtB,EAFM,KAEK1E,EAFL,KAIPsC,EAAkB,CACtBiD,QAAS,CAACtD,KAAMuB,EAAqB3B,MAAO,GAC5CoE,WAAY,CAAChE,KAAMuB,EAAsB3B,MAAO,KAChDqE,WAAY,CAACjE,KAAMuB,EAAsB3B,MAAO,MAPrC,EASmBmE,mBAAS1D,GAT5B,mBASNF,EATM,KASIC,EATJ,KAWb,OACE,yBAAK/B,UAAU,OACb,kBAACR,EAAW,CAACE,kBAAiBD,cAC9B,kBAACoG,EAAA,EAAD,CAAWC,OAAO,GAChB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACpE,EAAa,CAACC,WAAUC,cAAaC,qBAExC,kBAACgE,EAAA,EAAD,KACE,kBAAC,EAAY,CAAClE,WAAUsC,YAAWX,aChB3ByC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.586bae42.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, Form, Nav, FormControl, NavDropdown } from \"react-bootstrap\";\r\n\r\nconst tinycolor = require(\"tinycolor2\");\r\n\r\nexport default function TopNav({\r\n  changeHex,\r\n  changeVariation\r\n}) {\r\n  const handleHexChange = e => {\r\n    e.preventDefault();\r\n    changeHex(e.target.value);\r\n  };\r\n\r\n  const handleVariationChange = variation => {\r\n    changeVariation(variation);\r\n  };\r\n\r\n  const setRandom = () => {\r\n    const randomColor = tinycolor.random().toHexString();\r\n    changeHex(randomColor);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navbar expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n        <Nav className=\"mr-auto\">\r\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n\r\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n            <Navbar.Brand>Color Palette Generator</Navbar.Brand>\r\n            <NavDropdown\r\n              onSelect={e => handleVariationChange(e)}\r\n              title=\"Variation\"\r\n              id=\"variation\"\r\n            >\r\n              <NavDropdown.Item eventKey=\"analogous\">\r\n                Analogous\r\n              </NavDropdown.Item>\r\n              \r\n              <NavDropdown.Divider />\r\n\r\n              <NavDropdown.Item eventKey=\"monochromatic\">\r\n                Monochromatic\r\n              </NavDropdown.Item>\r\n              \r\n              <NavDropdown.Divider />\r\n\r\n              <NavDropdown.Item eventKey=\"complement\">\r\n                Complement\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Item eventKey=\"splitcomplement\">\r\n                Split Complement\r\n              </NavDropdown.Item>\r\n              <NavDropdown.Divider />\r\n              <NavDropdown.Item eventKey=\"triad\">Triad</NavDropdown.Item>\r\n              <NavDropdown.Item eventKey=\"tetrad\">Tetrad</NavDropdown.Item>\r\n            </NavDropdown>\r\n            \r\n            <NavDropdown.Divider />\r\n\r\n          </Navbar.Collapse>\r\n        </Nav>\r\n        <Nav.Link id=\"random\" onClick={() => setRandom()}>\r\n          Random\r\n        </Nav.Link>\r\n        <Form onChange={e => handleHexChange(e)} inline>\r\n          <FormControl type=\"text\" placeholder=\"#77d36a\" className=\"mr-sm-2\" />\r\n        </Form>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n","const simpleSetting = \"simple\";\r\nconst complexSetting = \"complex\";\r\n\r\nexport default {simpleSetting, complexSetting};\r\n","import React from \"react\";\r\nimport {\r\n  Navbar,\r\n  Form,\r\n  Nav,\r\n  FormControl,\r\n  NavDropdown,\r\n  ListGroup,\r\n  Button\r\n} from \"react-bootstrap\";\r\nimport Slider, { Range } from \"rc-slider\";\r\nimport 'rc-slider/assets/index.css';\r\nimport types from \"./types.js\";\r\n\r\nconst tinycolor = require(\"tinycolor2\");\r\n\r\nString.prototype.capitalize = function() {\r\n  return this.charAt(0).toUpperCase() + this.slice(1);\r\n};\r\n\r\nexport default function Settings({\r\n  settings,\r\n  setSettings,\r\n  defaultSettings\r\n}) {\r\n  const changeSetting = name => value => {\r\n    setSettings(setting => ({\r\n      ...setting,\r\n      [name]: {\r\n        ...setting[name],\r\n        value\r\n      }\r\n    }))\r\n  };\r\n\r\n  const resetSetting = name => e => {\r\n    setSettings(setting => ({\r\n      ...setting,\r\n      [name]: {\r\n        ...setting[name],\r\n        value: defaultSettings[name].value\r\n      }\r\n    }))\r\n  };\r\n\r\n  const simpleSliderProps = {min: 0, max: 100, step: 1, startPoint: 0};\r\n  const complexSliderProps = {min: 0, max: 200, step: 1, startPoint: 100};\r\n\r\n  const isChanged = (settingName, defaultValue) => settings[settingName].value !== defaultValue;\r\n\r\n  const simpleSettingItem = settingName => (\r\n    <ListGroup.Item active={isChanged(settingName, 0)}>\r\n          <div\r\n            className=\"setting-name\"\r\n            >\r\n            {settingName.capitalize()}\r\n          </div>\r\n          <div className=\"setting-slider\">\r\n            <Slider\r\n              value={settings[settingName].value}\r\n              onChange={changeSetting(settingName)}\r\n              {...simpleSliderProps}\r\n              />\r\n          </div>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={resetSetting(settingName)}>\r\n            reset\r\n          </Button>\r\n        </ListGroup.Item>\r\n  );\r\n\r\n  const complexSettingItem = settingName => (\r\n    <ListGroup.Item active={isChanged(settingName, 100)}>\r\n          <div\r\n            className=\"setting-name\"\r\n            >\r\n            {settingName.capitalize()}\r\n          </div>\r\n          <div className=\"setting-slider\">\r\n            <Slider\r\n              value={settings[settingName].value}\r\n              onChange={changeSetting(settingName)}\r\n              {...complexSliderProps}\r\n              />\r\n          </div>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={resetSetting(settingName)}>\r\n            reset\r\n          </Button>\r\n        </ListGroup.Item>\r\n  );\r\n\r\n  const settingItem = setting => (\r\n    settings[setting].type === types.simpleSetting ? simpleSettingItem(setting)\r\n      : settings[setting].type === types.complexSetting ? complexSettingItem(setting)\r\n      : null\r\n  );\r\n\r\n  const settingItems = Object.keys(settings).map(settingItem)\r\n\r\n  return (\r\n    <div>\r\n      <ListGroup>\r\n        {settingItems}\r\n      </ListGroup>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Color({ hex }) {\r\n  return (\r\n    <div style={{ backgroundColor: hex }} className=\"color\">\r\n      <div className=\"hex-value\">{hex}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport Color from \"./Color\";\r\nimport \"./Palette.css\";\r\n\r\nconst tinycolor = require(\"tinycolor2\");\r\n\r\nexport default function Palette({ settings, hex, variation }) {\r\n  useEffect(() => {\r\n    applySettings(tinycolor(hex))\r\n  }, [settings])\r\n  \r\n  let colors;\r\n  // Using a switch to set variation type set\r\n  switch (variation) {\r\n    case \"tetrad\":\r\n      colors = tinycolor(hex).tetrad();\r\n      break;\r\n    case \"analogous\":\r\n      colors = tinycolor(hex).analogous();\r\n      break;\r\n    case \"monochromatic\":\r\n      colors = tinycolor(hex).monochromatic();\r\n      break;\r\n    case \"splitcomplement\":\r\n      colors = tinycolor(hex).splitcomplement();\r\n      break;\r\n    case \"triad\":\r\n      colors = tinycolor(hex).triad();\r\n      break;\r\n    case \"tetrad\":\r\n      colors = tinycolor(hex).tetrad();\r\n      break;\r\n    case \"complement\":\r\n      colors = tinycolor(hex).complement().toHexString();\r\n      break;\r\n  }\r\n\r\n  if (!Array.isArray(colors)) {\r\n    return <Color hex={colors} />;\r\n  }\r\n  \r\n  const applySetting = (color, [name, {type, value}]) => (\r\n    name === 'lighten' ? color.lighten(value)\r\n      : name === 'brightness' ? (\r\n        value >= 100 ? color.brighten(value - 100) : color.darken(100 - value)\r\n      )\r\n      : name === 'saturation' ? (\r\n        value >= 100 ? color.saturate(value - 100) : color.desaturate(100 - value)\r\n      )\r\n      : color\r\n  );\r\n  \r\n  const applySettings = color => (\r\n    Object.entries(settings)\r\n      .reduce(applySetting, color)\r\n      .toHexString()\r\n  );\r\n\r\n  const colorPalette = colors.map(color => {\r\n    const hex = applySettings(color);\r\n    return <Color hex={hex} />;\r\n  });\r\n\r\n  return <div id=\"container\">{colorPalette}</div>;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport \"./App.css\";\r\nimport TopNav from \"./TopNav\";\r\nimport Settings from \"./Settings\";\r\nimport Palette from \"./Palette\";\r\nimport types from \"./types.js\";\r\n\r\nfunction App() {\r\n  const [hex, changeHex] = useState(\"#5f42ad\");\r\n  const [variation, changeVariation] = useState(\"analogous\");\r\n\r\n  const defaultSettings = {\r\n    lighten: {type: types.simpleSetting, value: 0},\r\n    brightness: {type: types.complexSetting, value: 100},\r\n    saturation: {type: types.complexSetting, value: 100}\r\n  }\r\n  const [settings, setSettings] = useState(defaultSettings)\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <TopNav {...{changeVariation, changeHex}}/>\r\n      <Container fluid={true}>\r\n        <Row>\r\n          <Col xs={3}>\r\n            <Settings {...{settings, setSettings, defaultSettings}} />\r\n          </Col>\r\n          <Col>\r\n            <Palette {...{settings, variation, hex}}/>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}